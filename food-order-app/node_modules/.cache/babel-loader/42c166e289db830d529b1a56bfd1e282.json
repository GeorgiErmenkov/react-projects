{"ast":null,"code":"var _jsxFileName = \"/home/georgi/projects/react-projects/food-order-app/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from './cart-context';\nimport { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.items.price * action.items.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return;\n};\n\nfunction CartProvider(props) {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/georgi/projects/react-projects/food-order-app/src/store/CartProvider.js"],"names":["CartContext","useReducer","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItems","updatedItem","concat","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAE,EADc;AAErBC,EAAAA,WAAW,EAAE;AAFQ,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA0B;AAEtB,UAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACJ,KAAP,CAAaO,KAAb,GAAqBH,MAAM,CAACJ,KAAP,CAAaQ,MAAjF;AACA,UAAMC,qBAAqB,GAAGN,KAAK,CAACH,KAAN,CAAYU,SAAZ,CACzBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACO,IAAP,CAAYC,EADR,CAA9B;AAEA,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYS,qBAAZ,CAAzB;AAEA,QAAIK,YAAJ;;AAEA,QAAGD,gBAAH,EAAqB;AACjB,YAAME,WAAW,GAAG,EAChB,GAAGF,gBADa;AAEhBL,QAAAA,MAAM,EAAEK,gBAAgB,CAACL,MAAjB,GAA0BJ,MAAM,CAACO,IAAP,CAAYH;AAF9B,OAApB;AAIAM,MAAAA,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAf;AACAc,MAAAA,YAAY,CAACL,qBAAD,CAAZ,GAAsCM,WAAtC;AACH,KAPD,MAOO;AACHD,MAAAA,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACO,IAA1B,CAAf;AACH;;AAED,WAAO;AACHX,MAAAA,KAAK,EAAEc,YADJ;AAEHb,MAAAA,WAAW,EAAEK;AAFV,KAAP;AAIH;;AAED;AACH,CA5BD;;AA8BA,SAASW,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AACzB,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCtB,UAAU,CAACI,WAAD,EAAcH,gBAAd,CAAlD;;AAEA,QAAMsB,oBAAoB,GAAIV,IAAD,IAAU;AACnCS,IAAAA,kBAAkB,CAAC;AAACf,MAAAA,IAAI,EAAE,KAAP;AAAcM,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAlB;AACF,GAFF;;AAIA,QAAMW,yBAAyB,GAAIV,EAAD,IAAQ;AACtCQ,IAAAA,kBAAkB,CAAC;AAACf,MAAAA,IAAI,EAAC,QAAN;AAAgBO,MAAAA,EAAE,EAAEA;AAApB,KAAD,CAAlB;AACF,GAFF;;AAIA,QAAMW,WAAW,GAAG;AAChBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADD;AAEhBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFP;AAGhBuB,IAAAA,OAAO,EAAEH,oBAHO;AAIhBI,IAAAA,UAAU,EAAEH;AAJI,GAApB;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACKL,KAAK,CAACQ;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAvBQT,Y;;KAAAA,Y;AAyBT,eAAeA,YAAf","sourcesContent":["import CartContext from './cart-context'\nimport { useReducer } from 'react';\n\nconst defaultCartState = {\n    items: [],\n    totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n    if (action.type === 'ADD'){\n        \n        const updatedTotalAmount = state.totalAmount + action.items.price * action.items.amount;\n        const existingCartItemIndex = state.items.findIndex(\n            (item) => item.id === action.item.id);\n        const existingCartItem = state.items[existingCartItemIndex];\n        \n        let updatedItems;\n\n        if(existingCartItem) {\n            const updatedItem = {\n                ...existingCartItem,\n                amount: existingCartItem.amount + action.item.amount\n            };\n            updatedItems = [...state.items];\n            updatedItems[existingCartItemIndex] = updatedItem;\n        } else {\n            updatedItems = state.items.concat(action.item);\n        }\n        \n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        }\n    }\n    \n    return\n};\n\nfunction CartProvider(props) {\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n    const addItemToCartHandler = (item) => {\n        dispatchCartAction({type: 'ADD', item: item});\n     };\n\n    const removeItemFromCartHandler = (id) => {\n        dispatchCartAction({type:'REMOVE', id: id})\n     };\n\n    const cartContext = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemToCartHandler,\n        removeItem: removeItemFromCartHandler\n    };\n\n    return (\n        <CartContext.Provider value={cartContext}>\n            {props.children}\n        </CartContext.Provider>\n    )\n}\n\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}