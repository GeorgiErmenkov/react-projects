{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst cartSlice = createSlice({\n  name: 'card',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity = existingItem.quantity + 1;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/georgi/projects/react-projects/redux-advanced/src/store/cart-slice.js"],"names":["createSlice","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","changed","filter","cartActions","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC1BE,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,EADG;AAEVC,IAAAA,aAAa,EAAE;AAFL,GAFY;AAM1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA7C,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;;AACA,UAAI,CAACO,YAAL,EAAoB;AAChBJ,QAAAA,KAAK,CAACJ,KAAN,CAAYY,IAAZ,CAAiB;AACbD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADC;AAEbE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFF;AAGbC,UAAAA,QAAQ,EAAE,CAHG;AAIbC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJP;AAKbf,UAAAA,IAAI,EAAEQ,OAAO,CAACU;AALD,SAAjB;AAOH,OARD,MAQM;AACFR,QAAAA,YAAY,CAACM,QAAb,GAAwBN,YAAY,CAACM,QAAb,GAAwB,CAAhD;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BT,OAAO,CAACO,KAA5D;AACH;AAEJ,KAlBK;;AAmBNI,IAAAA,kBAAkB,CAACb,KAAD,EAAOC,MAAP,EAAe;AAC7B,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAArC,CAArB;AACAP,MAAAA,KAAK,CAACH,aAAN;AACAG,MAAAA,KAAK,CAACc,OAAN,GAAgB,IAAhB;;AACA,UAAIV,YAAY,CAACM,QAAb,KAA0B,CAA9B,EAAiC;AAC7BV,QAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYmB,MAAZ,CAAmBT,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAAd;AACH,OAFD,MAEO;AACHH,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACK,KAAjE;AACH;AACJ;;AA9BK;AANgB,CAAD,CAA7B;AAwCA,OAAO,MAAMO,WAAW,GAAGvB,SAAS,CAACwB,OAA9B;AAEP,eAAexB,SAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst cartSlice = createSlice({\n    name: 'card',\n    initialState: {\n        items: [],\n        totalQuantity: 0,\n    },\n    reducers: {\n        addItemToCart(state, action) {\n            const newItem = action.payload;\n            const existingItem = state.items.find(item => item.id === newItem.id);\n            state.totalQuantity++;\n            if (!existingItem)  {\n                state.items.push({\n                    id: newItem.id, \n                    price: newItem.price,\n                    quantity: 1,\n                    totalPrice: newItem.price,\n                    name: newItem.title\n                });\n            } else{\n                existingItem.quantity = existingItem.quantity + 1;\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n            }\n\n        },\n        removeItemFromCart(state,action) {\n            const id = action.payload;\n            const existingItem = state.items.find(item => item.id === id);\n            state.totalQuantity--;\n            state.changed = true;\n            if (existingItem.quantity === 1) {\n                state.items = state.items.filter(item => item.id !== id);\n            } else {\n                existingItem.quantity--;\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n            }\n        },\n    }\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;"]},"metadata":{},"sourceType":"module"}